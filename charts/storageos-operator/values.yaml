# Default values for storageos.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

name: storageos-operator

k8sDistro: default

serviceAccount:
  create: true
  name: storageos-operator

podSecurityPolicy:
  enabled: false
  annotations:
    {}
    ## Specify pod annotations
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
    ##
    # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
    # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

# operator-specific configuation parameters.
operator:
  image:
    repository: storageos/operator
    tag: v2.5.0
    pullPolicy: IfNotPresent

# cluster-specific configuation parameters.
cluster:
  # set create to true if the operator should auto-create the StorageOS cluster.
  create: true

  # Name of the deployment.
  name: storageos

  # Namespace to install the StorageOS cluster into.
  # This is opposed to the namespace of the operator, which is refered to
  # with .Release.Namespace
  namespace: &cluster-ns storageos
  # Set to false if you'd like to use a pre-existing namespace
  createNamespace: true

  # Name of the secret containing StorageOS API credentials.
  secretRefName: storageos-api

  # Default admin account.
  admin:
    # Username to authenticate to the StorageOS API with.
    username: storageos

    # Password to authenticate to the StorageOS API with. This must be at least
    # 8 characters long.
    password:

  # sharedDir should be set if running kubelet in a container.  This should
  # be the path shared into to kubelet container, typically:
  # "/var/lib/kubelet/plugins/kubernetes.io~storageos".  If not set, defaults
  # will be used.
  sharedDir:

  # Key-Value store backend.
  kvBackend:
    embedded: false
    address:
    backend: etcd
    tlsSecretName:
    tlsSecretNamespace:

  # Node selector terms to install StorageOS on.
  nodeSelectorTerm:
    key:
    value:

  # Pod toleration for the StorageOS pods.
  toleration:
    key:
    value:

  # To disable anonymous usage reporting across the cluster, set to true.
  # Defaults to false. To help improve the product, data such as API usage and
  # StorageOS configuration information is collected.
  disableTelemetry: false

  # Using a YAML anchor to delete the custom storageClass
  storageClassName: &storageClassName storageos

  images:
    apiManager:
      repository: storageos/api-manager
      tag: v1.2.2
    csiV1ExternalAttacherV3:
      repository: quay.io/k8scsi/csi-attacher
      tag: v3.1.0
    csiV1ExternalProvisioner:
      repository: storageos/csi-provisioner
      tag: v2.1.1-patched
    csiV1ExternalResizer:
      repository: quay.io/k8scsi/csi-resizer
      tag: v1.1.0
    csiV1LivenessProbe:
      repository: quay.io/k8scsi/livenessprobe
      tag: v2.2.0
    csiV1NodeDriverRegistrar:
      repository: quay.io/k8scsi/csi-node-driver-registrar
      tag: v2.1.0
    init:
      repository:  storageos/init
      tag: v2.1.0
    # nodeContainer is the StorageOS node image to use, available from the
    # [Docker Hub](https://hub.docker.com/r/storageos/node/).
    node:
      repository: storageos/node
      tag: v2.5.0

  csi:
    deploymentStrategy: deployment

# The following is used for cleaning up unmanaged cluster resources when
# auto-install is enabled.
# If a namespace is not specified, the Release namespace is used.
#
# Note: I think most of this is now uneccessary, the job to remove the
# finalizer unsures the removal of most of these resources.
# However, some are still needed (the storageos-operator-webhook secret &
# storageclass, for example) and that justifies the functionality remaining in
# my eyes.
cleanup:
  images:
    kubectl:
      repository: bitnami/kubectl
      tag: 1.18.2
  resources:
    - name: daemonset
      namespace: *cluster-ns
      command:
        - "daemonset"
        - "storageos-node"
    - name: csi-helper
      namespace: *cluster-ns
      command:
        - "deployment"
        - "storageos-csi-helper"
    - name: scheduler
      namespace: *cluster-ns
      command:
        - "deployment"
        - "storageos-scheduler"
    - name: api-manager
      namespace: *cluster-ns
      command:
        - "deployment"
        - "storageos-api-manager"
    - name: cluster-configmaps
      namespace: *cluster-ns
      command:
        - "configmap"
        - "storageos-api-manager-leader"
        - "storageos-node"
    - name: operator-configmaps
      command:
        - "configmap"
        - "operator"
        - "storageos-operator"
        - "storageos-related-images"
    - name: cluster-serviceaccounts
      namespace: *cluster-ns
      command:
        - "serviceaccount"
        - "storageos-api-manager"
        - "storageos-csi-helper"
        - "storageos-node"
        - "storageos-scheduler"
    - name: operator-serviceaccounts
      command:
        - "serviceaccount"
        - "storageos-operator"
    - name: operator-secrets
      command:
        - "secret"
        - "storageos-operator-webhook"
    - name: service
      namespace: *cluster-ns
      command:
        - "service"
        - "storageos"
    - name: clusterrole
      command:
        - "clusterrole"
        - "storageos:api-manager"
        - "storageos:csi-attacher"
        - "storageos:csi-provisioner"
        - "storageos:csi-resizer"
        - "storageos:driver-registrar"
        - "storageos:init"
        - "storageos:key-management"
        - "storageos:metrics-reader"
        - "storageos:node"
        - "storageos:proxy"
        - "storageos:scheduler-extender"
    - name: clusterrolebinding
      command:
        - "clusterrolebinding"
        - "storageos:api-manager"
        - "storageos:csi-attacher"
        - "storageos:csi-provisioner"
        - "storageos:csi-resizer"
        - "storageos:driver-registrar"
        - "storageos:init"
        - "storageos:key-management"
        - "storageos:node"
        - "storageos:proxy"
        - "storageos:scheduler-extender"
    - name: storageclass
      command:
        - "storageclass"
        # Using a YAML anchor to delete the custom storageClass
        - *storageClassName
